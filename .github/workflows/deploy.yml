name: Build and Deploy to AKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: weather-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore WeatherApp/WeatherApp.csproj
    
    - name: Build application
      run: dotnet build WeatherApp/WeatherApp.csproj --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test WeatherApp/WeatherApp.csproj --no-build --verbosity normal || true
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Build and push Docker image to ACR
      run: |
        IMAGE_TAG=${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        az acr build \
          --registry ${{ secrets.ACR_NAME }} \
          --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
          WeatherApp/
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Deploy to AKS
      if: github.ref == 'refs/heads/main'
      run: |
        # Get AKS credentials
        az aks get-credentials \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --name ${{ secrets.CLUSTER_NAME }} \
          --overwrite-existing
        
        # Update deployment with new image
        kubectl set image deployment/weather-app \
          weather-app=${{ env.IMAGE_TAG }} \
          --record
        
        # Wait for deployment to complete
        kubectl rollout status deployment/weather-app --timeout=300s
        
        # Get service information
        kubectl get service weather-app-service

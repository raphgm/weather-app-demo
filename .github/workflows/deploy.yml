name: Build and Deploy to AKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: weather-app
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore WeatherApp/WeatherApp.csproj
    
    - name: Build application
      run: dotnet build WeatherApp/WeatherApp.csproj --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test WeatherApp/WeatherApp.csproj --configuration Release --no-build --verbosity normal
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push Docker image to ACR
      run: |
        IMAGE_TAG=${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        az acr build \
          --registry ${{ secrets.ACR_NAME }} \
          --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --file WeatherApp/Dockerfile \
          .
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy to AKS
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Validate required secrets
        if [ -z "${{ secrets.RESOURCE_GROUP }}" ]; then
          echo "ERROR: RESOURCE_GROUP secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.CLUSTER_NAME }}" ]; then
          echo "ERROR: CLUSTER_NAME secret is not set"
          exit 1
        fi
        
        echo "Getting AKS credentials for cluster: ${{ secrets.CLUSTER_NAME }}"
        echo "Resource group: ${{ secrets.RESOURCE_GROUP }}"
        
        # Get AKS credentials
        az aks get-credentials \
          --resource-group "${{ secrets.RESOURCE_GROUP }}" \
          --name "${{ secrets.CLUSTER_NAME }}" \
          --overwrite-existing
        
        # Update deployment with new image
        kubectl set image deployment/weather-app \
          weather-app=${{ env.IMAGE_TAG }}
        
        # Wait for rollout to complete
        kubectl rollout status deployment/weather-app --timeout=600s
        
        # Verify deployment
        kubectl get pods -l app=weather-app
        kubectl get service weather-app-service